{{define "html-head"}}
<head data-turbolinks-eval="false">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="dcrdata, an original Decred block explorer powered by Go">
    <meta name="author" content="The Decred developers">
    <!--  Custom favicon  -->
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/apple-touch-icon.png">
    <link rel="icon" href="/images/favicon/favicon.ico">
    <link rel="icon" type="image/png" href="/images/favicon/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/images/favicon/favicon-16x16.png" sizes="16x16">
    <link rel="manifest" href="/images/favicon/manifest.json">
    <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg">
    <link rel="shortcut icon" href="/images/favicon/favicon.ico">
    <meta name="apple-mobile-web-app-title" content="Decred - Autonomous Digital Currency">
    <meta name="application-name" content="Decred - Autonomous Digital Currency">
    <meta name="msapplication-TileColor" content="#2973ff">
    <meta name="msapplication-TileImage" content="/images/favicon/mstile-144x144.png">
    <meta name="msapplication-config" content="/images/favicon/browserconfig.xml">
    <meta name="turbolinks-cache-control" content="no-cache">
    <title>{{.}}</title>
    <link href="/css/bootstrap.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
    <link href="/css/charts.css" rel="stylesheet">
     <link href="/css/nexthome.css" rel="stylesheet">
    <!-- <link rel="stylesheet/less" type="text/css" href="/css/dynamic.less"> -->
    <script src="/js/turbolinks.js"></script>
    <script src="/js/jquery.js"></script>
    <script src="/js/lodash.min.js"></script>
    <script src="/js/util.js"></script>
    <script src="/js/messagesocket.js"></script>
    <script src="/js/humanize.js"></script>
    <script src="/js/stimulus.umd.js"></script>
    <script src="/js/mousetrap.min.js"></script>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
{{end}}

{{define "navbar"}}
<div class="top-nav">
    <div class="container">
        <div class="d-flex align-items-center flex-wrap">
            <div class="d-flex align-items-center">
                <div class="col-sm-auto" style="padding: 0 2px">
                    <a href="/" class="no-underline"><img src="/images/logo.png" alt="dcr icon"></a>
                </div>
            </div>
            <div class="col pl-2">
                <form class="navbar-form" role="search" id="search-form" action="/search">
                    <div class="input-group">
                        <input
                            tabindex="0"
                            type="text"
                            name="search"
                            id="search"
                            class="form-control top-search mousetrap"
                            placeholder="Search for blocks, addresses or transactions"
                        />
                    </div>
                </form>
            </div>
            <nav role="navigation" id="hamburger-menu" data-turbolinks-permanent>
                <div id="menuToggle">
                    <input type="checkbox" id="menuToggleCheckbox"/>
                    <span class="patty"></span>
                    <span class="patty"></span>
                    <span class="patty short"></span>
                    <div id="menu">
                        <a data-keynav-skip href="/" title="Home">Home</a>
                        <a data-keynav-skip href="/blocks" title="Decred blocks">Blocks</a>
                        <a data-keynav-skip href="/mempool" title="Decred mempool">Mempool</a>
                        <a data-keynav-skip href="/ticketpool" title="Decred ticket pool">Ticket Pool</a>
                        <a data-keynav-skip href="/charts" title="Decred charts">Charts</a>
                        <a data-keynav-skip href="/agendas" title="Agendas">Agendas</a>
                        <a data-keynav-skip href="/parameters" title="Chain Parameters">Parameters</a>
                        <a data-keynav-skip href="/decodetx" title="Decode or send a raw transaction">Decode/Broadcast Tx</a>
                        {{if eq .NetName "Mainnet"}}
                           <a data-keynav-skip href="http://testnet.dcrdata.org/" title="Home">Switch To Testnet</a>
                        {{else}}
                           <a data-keynav-skip href="https://explorer.dcrdata.org/" title="Home">Switch To Mainnet</a>
                        {{end}}
                        <a data-keynav-skip data-turbolinks="false" href="javascript:toggleSun()" class="jsonly"><span id="sun-icon" class="dcricon-sun-fill no-underline pr-2"></span> Night Mode</a>
                        <a data-keynav-skip data-turbolinks="false" href="#" class="jsonly" id="keynav-toggle">
                            <span class="text">Enable Hot Keys</span><span class="keys-hint">(&nbsp;&nbsp;<span class="arrows"> &#8592;<br>&#8594;</span>&nbsp;&nbsp;enter&nbsp;&nbsp;\&nbsp;&nbsp;=&nbsp;&nbsp;)</span>
                        </a>
                        <a data-keynav-skip href="https://github.com/decred/dcrdata#json-rest-api" title="API Endpoints" target="_blank">JSON API Docs</a>
                    </div>
                </div>
            </nav>
        </div>
    </div>
</div>
<div id="watermark">HODL<br>HODL<br>HODL</div>
<script data-turbolinks-eval="false">
    $(".jsonly").show()
    $.ajaxSetup({
        cache: true
    });
    function setCookie(cname, cvalue, exMins) {
        var d = new Date();
        d.setTime(d.getTime() + (exMins*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }
    var sunIcon = document.getElementById("sun-icon")
    var darkBGCookieName = 'dcrdataDarkBG';
    function darkEnabled() {
        return document.cookie.includes(darkBGCookieName)
    }
    if (darkEnabled()) {
        toggleToDarkClasses(document.body)
    } else {
        toggleToLightClasses(document.body)
    }
    function toggleToDarkClasses(body) {
        $(sunIcon).removeClass('dcricon-sun-fill')
        $(sunIcon).addClass('dcricon-sun-stroke')
        $(body).addClass('darkBG')
    }
    function toggleToLightClasses(body) {
        $(body).removeClass('darkBG');
        $(sunIcon).removeClass('dcricon-sun-stroke')
        $(sunIcon).addClass('dcricon-sun-fill')
    }
    function toggleSun() {
        if (darkEnabled()) {
            setCookie(darkBGCookieName, '', 0)
            toggleToLightClasses(document.body)
            $(document).trigger("nightMode", { nightMode: false });
        } else {
            setCookie(darkBGCookieName, 1, 525600)
            toggleToDarkClasses(document.body)
            $(document).trigger("nightMode", { nightMode: true })
        }
    }
    document.addEventListener("turbolinks:before-render", function(event) {
        if (darkEnabled()) {
            toggleToDarkClasses(event.data.newBody)
        } else {
            toggleToLightClasses(event.data.newBody)
        }
    })
    $(document).click( function(e) {
        if ($(e.target).id == "menuToggleCheckbox") {
            return
        }
        if ($(e.target).parents("#hamburger-menu").size() > 0) {
            return
        }
        closeMenu(e)
    })


    function toggleMenu(e) {
        $("#menuToggle input").prop('checked', !$("#menuToggle input").prop('checked'))
    }
    function closeMenu(e) {
        $("#menuToggle input").prop('checked', false)
    }
    function updateConnectionStatus(msg, connected) {
        var el = $('#connection');
        el.removeClass('hidden')
        if (connected) {
            el.addClass('connected')
            el.removeClass('disconnected')
        } else {
            el.removeClass('connected');
            el.addClass('disconnected');
        }
        el.html(msg + '<div></div>')
    }

    function getSocketURI(loc) {
        var protocol = (loc.protocol === 'https:') ? 'wss' : 'ws'
        return protocol + "://" + loc.host + '/ws'
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function txRowHTMLFlexBox(tx) {
        var totalTxt = ""
        humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
            totalTxt += str.textContent
        })
        return `<div class="d-flex flex-table-row">
            <a class="hash truncate-hash" style="flex: 1 1 auto" href="/tx/${tx.hash}" title="${tx.hash}">${tx.hash}</a>
            <span style="flex: 0 0 60px" class="mono text-right ml-1">${tx.Type}</span>
            <span style="flex: 0 0 105px" class="mono text-right ml-1">${totalTxt}</span>
            <span style="flex: 0 0 50px" class="mono text-right ml-1">${tx.size} B</span>
            <span style="flex: 0 0 65px" class="mono text-right ml-1" data-age="${tx.time}">${humanize.timeSince(tx.time)}</span>
        </div>`
    }

    function MempoolBlockDisplay(tx) {
        var newBlock = ""
        if (tx.Type == "Vote") {
            if (tx.vote_info.block_validation.validity == true) {
                    newBlock += '<a class="btn btn-success" href="/tx/${tx.hash}" role="button"></a>'
            } else {
                    newBlock += '<a class="btn btn-danger" href="/tx/${tx.hash}" role="button"></a>'
            }
        } else if (tx.Type == "Ticket"){
            newBlock += '<a class="btn btn-secondary ${tx.FeeRateSize}-ticket" href="/tx/${tx.hash}" role="button"></a>'
        } else if (tx.Type == "Revocation"){
            newBlock += '<a class="btn btn-warning ${tx.FeeRateSize}-rev" href="/tx/${tx.hash}" role="button"></a>'
        } else {
            newBlock += '<a class="btn btn-info ${tx.TxAmount}-amount-${tx.ByteSize}" href="/tx/${tx.hash}" role="button"></a>'
        }
    }

    var ws; // websocket global
    async function createWebSocket(loc) {
        // wait a bit to prevent websocket churn from drive by page loads
        console.log('Waiting to create websocket');
        $('#connection').removeClass('hidden');
        var uri = getSocketURI(loc)
        ws = new MessageSocket(uri);
        await sleep(3000);
        ws.connect()
        console.log('Starting websocket');
        console.log("createdWebSocket", uri, ws)
        ws.registerEvtHandler("open", function() {
            console.log('Connected')
            updateConnectionStatus('Connected', true);
        });

        ws.registerEvtHandler("close", function() {
            console.log('Disconnected')
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("error", function(evt) {
            console.log("WebSocket error:", evt);
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("newtx", function(evt) {
            console.log("New Transactions: ", evt);
            var txs = JSON.parse(evt)
            txs.forEach(function(tx, idx) {
            addTxRow = function(str) {
                var rows = $('#' + str +' tbody tr')
                var totalTxt = ""
                humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                    totalTxt += str.textContent
                })
                var newRow = '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                    '<td class="mono fs15 text-right">' + tx.size + ' B</td>' +
                    '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'
                var newRowHtml = $.parseHTML(newRow)
                $(newRowHtml).insertBefore(rows.first())
            }
            
            switch (tx.Type) {
                case "Ticket":
                    $('#mempool_ticket_number').text(parseInt($('#mempool_ticket_number').text()) + 1)
                    addTxRow('mempool_tickets')
                    break
                case "Vote":
                    $('#mempool_vote_number').text(parseInt($('#mempool_vote_number').text()) + 1)
                    var rows = $('#mempool_votes tbody tr')
                    var totalTxt = ""
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    var newRow = '<tr><td class="break-word"><span><a class="hash" title="('+tx.vote_info.mempool_ticket_index+
                        ') ' + tx.vote_info.ticket_spent + '" href="/tx/' + tx.hash + '">' + tx.hash + '</a></span></td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_version + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.block_validation.validity + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].id + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].choice.Id + '</td>' +
                        '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                        '<td class="mono fs15">' + tx.size + ' B</td>' +
                        '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'
                    var newRowHtml = $.parseHTML(newRow)
                    $(newRowHtml).insertBefore(rows.first())
                    break
                case "Regular":
                    $('#mempool_regular_number').text(parseInt($('#mempool_regular_number').text()) + 1)
                    addTxRow('mempool_transactions')
                    break
                case "Revoke":
                    $('#mempool_revoke_number').text(parseInt($('#mempool_revoke_number').text()) + 1)
                    addTxRow('mempool_revocations')
                    break
            }

            if (window.location.pathname == "/"){
                var rows = $('#mini-transactions .flex-table-row')
                var newRowHtml = $.parseHTML(txRowHTMLFlexBox(tx))
                rows.last().remove()
                $(newRowHtml).insertBefore(rows.first())
            }

            if (window.location.pathname == "/nexthome"){
                var rows = $('#mempool .card-header')
                var newBlock = ""
                if (tx.Type == "Vote") {
                    if (tx.vote_info.block_validation.validity == true) {
                            newBlock += '<a class="btn btn-success" href="/tx/${tx.hash}" role="button"></a>'
                    } else {
                            newBlock += '<a class="btn btn-danger" href="/tx/${tx.hash}" role="button"></a>'
                    }
                } else if (tx.Type == "Ticket"){
                    newBlock += '<a class="btn btn-secondary ${tx.FeeRateSize}-ticket" href="/tx/${tx.hash}" role="button"></a>'
                } else if (tx.Type == "Revocation"){
                    newBlock += '<a class="btn btn-warning ${tx.FeeRateSize}-rev" href="/tx/${tx.hash}" role="button"></a>'
                } else {
                    newBlock += '<a class="btn btn-info ${tx.TxAmount}-amount-${tx.ByteSize}" href="/tx/${tx.hash}" role="button"></a>'
                }
            }
        })
        var newRowHtml = $.parseHTML(newBlock)
        rows.last().remove()
        $(newRowHtml).insertBefore(rows.first())
        setTimeElements()
        });

        ws.registerEvtHandler("getmempooltxsResp", function(evt) {
            console.log("Get Mempool: ", evt)
            var newTable = ''
            var makeNewTable =function (tx) {
                    var totalTxt = ""
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15 text-right">' + totalTxt +'</td>' +
                    '<td class="mono fs15 text-right">' + tx.size + ' B</td>' +
                    '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) + '</td>'
                }
            var m = JSON.parse(evt)

            m.tickets.forEach(makeNewTable)
            $('#mempool_tickets tbody').html($.parseHTML(newTable))

            newTable = ''
            m.tx.forEach(makeNewTable)
            $('#mempool_transactions tbody').html($.parseHTML(newTable))

            newTable = ''
            m.votes.forEach(function (tx) {
                var rows = $('#mempool_votes tbody tr')
                    var totalTxt = ""
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" title="('+tx.vote_info.mempool_ticket_index+
                        ') ' + tx.vote_info.ticket_spent + '" href="/tx/' + tx.hash + '">' + tx.hash + '</a></span></td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_version + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.block_validation.validity + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].id + '</td>' +
                        '<td class="mono fs15">' + tx.vote_info.vote_choices[0].choice.Id + '</td>' +
                        '<td class="mono fs15 text-right"> ' + totalTxt +'</td>' +
                        '<td class="mono fs15">' + tx.size + ' B</td>'  +
                        '<td class="mono fs15 text-right" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td>'

            })
            $('#mempool_votes tbody').html($.parseHTML(newTable))

            if (m.num_revokes > 0) {
                newTable = ''
                m.votes.forEach(makeNewTable)
                $('#mempool_revocations tbody').html($.parseHTML(newTable))
            }

            setTimeElements()
        });

        ws.registerEvtHandler("ping", function(evt) {
            console.log("ping. users online: ", evt)
            //ws.send("pong", "copy")
        });
        ws.registerEvtHandler("decodetxResp", function(evt) {
            console.log("Got message: ", evt);
            $("#decode_header").text("Decoded tx");
            $("#decoded_tx").text(evt);
        })
        ws.registerEvtHandler("sendtxResp", function(evt) {
            console.log("Got message: ", evt);
            $("#decode_header").text("Sent tx");
            $("#decoded_tx").text(evt);
        })
        var updateBlockData = function (event) {
            console.log("Received newblock message", event);
            var newBlock = JSON.parse(event);
            var confirms = $('[data-confirmation-block-height]');
            $.each(confirms, function(i, v) {
                if (isNaN($(v).text())) {
                    $(v).text("0");
                }
                $(v).text(
                    newBlock.block.height - $(v).data('confirmation-block-height')
                )
            })

            // block summary data
            var fullb = newBlock.full_block;
            desktopNotifyNewBlock(fullb);

            var expTableRows = $('#explorerblocks div div div');
            if (expTableRows){
                expTableRows.last().remove()
                
                var newRow = '<tr id="' + b.height + '">' +
                    '<td><a href="/block/' + b.height + '" class="fs18">' + b.height + '</a></td>' +
                    '<td>' + b.tx + '</td>' +
                    '<td>' + b.votes + '</td>' +
                    '<td>' + b.tickets + '</td>' +
                    '<td>' + b.revocations + '</td>' +
                    '<td>' + humanize.bytes(b.size) + '</td>' +
                    '<td data-target="main.age"  data-age=' + b.time + '>' + humanize.timeSince(b.time) + '</td>' +
                    '<td>' + b.formatted_time + '</td>' +
                '</tr>'


                var newRow = '<div class="card"><div class="card-header">'
                if (fullb.Votes != null) {
                    for (var i = 0; i < fullb.Votes.length; i++) {
                        if (fullb.Votes[i].VoteInfo.block_validation.validity == true) {
                            newRow += '<a class="btn btn-success" href="/tx/' + fullb.Votes[i].TxID + '" role="button"></a>'
                        } else {
                            newRow += '<a class="btn btn-danger" href="/tx/' + fullb.Votes[i].TxID + '" role="button"></a>'
                        }
                    }
                }
                if (fullb.Misses != null) {
                    for (var i = 0; i < fullb.Misses.length; i++) {
                        newRow += '<a class="btn btn-outline-dark" href="/tx/' + fullb.Misses[i] + '" role="button"></a>'
                    }
                }
                newRow += '<div class="row"></div>'
                if (fullb.Tickets != null) {
                    for (var i = 0; i < fullb.Tickets.length; i++) {
                        newRow += '<a class="btn btn-secondary ' + fullb.Tickets[i].FeeRateSize + '-ticket" href="/tx/' + fullb.Tickets[i].TxID + '" role="button"></a>'
                    }
                }
                if (fullb.Revs != null) {
                    for (var i = 0; i < fullb.Revs.length; i++) {
                        newRow += '<a class="btn btn-warning ' + fullb.Revs[i].FeeRateSize + '-rev" href="/tx/' + fullb.Revs[i].TxID + '" role="button"></a>'
                    }
                }
                newRow += '<div class="row"></div>'
                if (fullb.Tx != null) {
                    for (var i = 0; i < fullb.Tx.length; i++) {
                        if (fullb.Tx.Coinbase != true) {
                            newRow += '<a class="btn btn-info ' + fullb.Tx[i].TxAmount + '-amount-' + fullb.Tx[i].ByteSize + '" href="/tx/' + fullb.Tx[i].TxID + '" role="button"></a>'
                        }
                    }
                }
                newRow += '</div>' + '<div class="card-body text-center">'
                            + '<a href="/block/' + fullb.height + '">#' + fullb.height + '</a>'
                            + '<p data-age="' + fullb.time + '"></p>'
                            + '</div></div>'
                var newRowHtml = $.parseHTML(newRow)
                $(newRowHtml).insertBefore(expTableRows.first())
            }
            

            var ex = newBlock.extra
            if ($("#bsubsidy_total").text() !== "") {
                $("#difficulty").html(humanize.decimalParts(ex.difficulty, true, 8))
                $("#bsubsidy_total").html(humanize.decimalParts(ex.subsidy.total/100000000, false, 8))
                $("#bsubsidy_pow").html(humanize.decimalParts(ex.subsidy.pow/100000000, false, 8))
                $("#bsubsidy_pos").html(humanize.decimalParts((ex.subsidy.pos/500000000), false, 8)) // 5 votes per block (usually)
                $("#bsubsidy_dev").html(humanize.decimalParts(ex.subsidy.dev/100000000, false, 8))
                $("#coin_supply").html(humanize.decimalParts(ex.coin_supply/100000000, true, 8))
                $("#blocksdiff").html(humanize.decimalParts(ex.sdiff, false, 8))
                $("#dev_fund").html(humanize.decimalParts(ex.dev_fund/100000000, true, 8))
                $("#window_block_index").text(ex.window_idx)
                $("#pos-window-progess-bar").css({ width: (ex.window_idx/ex.params.window_size)*100 + "%" })
                $("#reward_block_index").text(ex.reward_idx)
                $("#pow-window-progess-bar").css({ width: (ex.reward_idx/ex.params.reward_window_size)*100 + "%" })
                $("#pool_size").text(ex.pool_info.size)
                $("#pool_value").html(humanize.decimalParts(ex.pool_info.value, true, 8))
                $("#ticket_reward").html(parseFloat(ex.reward).toFixed(2))
                $("#target_percent").html(parseFloat(ex.pool_info.percent_target).toFixed(2))
                $("#pool_size_percentage").html(parseFloat(ex.pool_info.percent).toFixed(2))
            }
        };
        ws.registerEvtHandler("newblock", updateBlockData);

        var updateMempool = function (event) {
            console.log("Received mempool message", event);
            var m = JSON.parse(event);
            console.log(m);

            //mempool info
            $('#mempool_ticket_number').text(m.num_tickets)
            $('#mempool_vote_number').text(m.num_votes)
            $('#mempool_regular_number').text(m.num_regular)
            $('#mempool_revoke_number').text(m.num_revokes)
            if (window.location.pathname == "/mempool") {
                $('#best_block').text(m.block_height)
                $('#best_block').attr('href', '/block/'+m.block_height)
                $('#best_block_time').data('age', m.block_time)
                $('#mempool_size').text(m.formatted_size)
                ws.send("getmempooltxs", "")
            }

            if (window.location.pathname == "/") {
                var newTable = ""
                m.latest.forEach(function (tx) {
                    var totalTxt = ""
                    humanize.decimalParts(tx.total, false, 8).forEach(function (str) {
                        totalTxt += str.textContent
                    })
                    newTable += '<tr><td class="break-word"><span><a class="hash" href="/tx/' +
                    tx.hash + '">' + tx.hash + '</a></span></td>' +
                    '<td class="mono fs15">' + tx.Type + '</td>'+
                    '<td class="mono fs15">' + totalTxt +'</td>' +
                    '<td class="mono fs15">' + tx.size + ' B</td>' +
                    '<td class="mono fs15" data-age="' + tx.time +'">' + humanize.timeSince(tx.time) +'</td></tr>'
                })
                $('#mini-transactions tbody').html(newTable)
            }

            if (window.location.pathname == "/nexthome") {
                var newTable = ""
                m.latest.forEach(function (tx) {
                    if (tx.Type == "Vote") {
                        if (tx.vote_info.block_validation.validity == true) {
                                newTable += '<a class="btn btn-success" href="/tx/' + tx.hash + '" role="button"></a>'
                        } else {
                                newTable += '<a class="btn btn-danger" href="/tx/' + tx.hash + '" role="button"></a>'
                        }
                    } else if (tx.Type == "Ticket"){
                            newTable += '<a class="btn btn-secondary ' + tx.FeeRateSize + '-ticket" href="/tx/' + tx.hash + '" role="button"></a>'
                    } else if (tx.Type == "Revocation"){
                            newTable += '<a class="btn btn-warning ' + tx.FeeRateSize + '-rev" href="/tx/' + tx.hash + '" role="button"></a>'
                    } else {
                            newTable += '<a class="btn btn-info ' + tx.TxAmount + '-amount-' + tx.ByteSize + '" href="/tx/' + tx.hash +'" role="button"></a>'
                    }
                })
                $('#mempool').html(newTable)
            }
            updateAges()
        };
        ws.registerEvtHandler("mempool", updateMempool);
    }

    document.getElementById('search').onkeypress = function(e){
        if (!e) e = window.event;
        var keyCode = e.keyCode || e.which;
        if (keyCode == '13'){
            Turbolinks.visit("/search?search="+this.value);
            return false;
        }
    }

    // desktop notifications
    function onShowNotification() {
        console.log('block ntfn shown');
    }
    function onCloseNotification() {
        console.log('block ntfn closed');
    }
    function onClickNotification() {
        console.log('block ntfn clicked');
    }
    function onErrorNotification() {
        console.error('Error showing notification. You may need to request permission.');
    }
    function onPermissionGranted() {
        console.log('Permission has been granted by the user');
    }
    function onPermissionDenied() {
        console.warn('Permission has been denied by the user');
    }

    function doNotification(block) {
        var newBlockNtfn = new Notify('New Decred Block Mined', {
            body: 'Block mined at height ' + block.height,
            tag: 'blockheight',
            image: '/images/dcrdata144x128.png',
            icon: '/images/dcrdata144x128.png',
            notifyShow: onShowNotification,
            notifyClose: onCloseNotification,
            notifyClick: onClickNotification,
            notifyError: onErrorNotification,
            timeout: 10
        });
        newBlockNtfn.show();
    }

    function desktopNotifyNewBlock(block) {
        if (!Notify.needsPermission) {
            doNotification(block);
        }
    }
</script>

<script>
    if (!ws) {
        createWebSocket(window.location)
    }
</script>

<script src="/js/notify.min.js"></script>

{{end}}

{{define "footer"}}
<footer class="navbar-fixed-bottom">
    <div class="container wrapper text-center">
        <div style="text-align: left; margin:0 auto !important; display:inline-block">
            <a class="nav-item" href="https://github.com/decred/dcrdata" title="dcrdata on GitHub" target="_blank">dcrdata v{{.Version}}</a>
            <a class="nav-item" href="https://github.com/decred/dcrdata/blob/master/LICENSE" target="_blank">© 2018 The Decred developers (ISC)</a>
        </div>
        <div style="float: right;">
            <span data-turbolinks-permanent class="nav-item" id="connection"
                title="While connected, you will receive live page updates and, if enabled, desktop notifications (click to enable)."
                >Connecting to WebSocket...<div></div>
            </span>
        </div>
    </div>
</footer>
<script data-turbolinks-eval="false">

    // Keyboard Navigation
    var targets;
    var targetsLength;
    var currentIndex = 0;
    var jumpToIndexOnLoad;
    var keyNavCookieName = 'dcrdataKeyNav';

    function keyNavEnabled() {
        return document.cookie.includes(keyNavCookieName)
    }

    function clearTargets() {
        $(".keynav-target").each((i,el) => {
            $(el).removeClass("keynav-target").removeClass("pulsate")
        })
    }

    function enableKeyNav() {
        setCookie(keyNavCookieName, 1, 525600)
        Mousetrap.unpause()
        $("#keynav-toggle .text").text("Disable Hot Keys")
        keyNav()
    }

    function disableKeyNav () {
        setCookie(keyNavCookieName, '', 0)
        clearTargets()
        $("#keynav-toggle .text").text("Enable Hot Keys")
        Mousetrap.pause()
    }

    function toggleKeyNav() {
        if (keyNavEnabled()) {
            disableKeyNav()
        }  else {
            enableKeyNav()
        }
    }

    function updateKeyNavTargets() {
        if ($("#menuToggle input").prop('checked')) {
            targets = $('#hamburger-menu a');
        } else {
            targets = $.merge($("a:not([data-keynav-skip])"),($('.top-search')));
        }
        targetsLength = targets.length;
        clearTargets()
        $(targets[currentIndex]).addClass("keynav-target").focus().blur() // refocuses keyboard context
        if (pulsate) {
            $(targets[currentIndex]).addClass("pulsate")
        }
    }


    function keyNav(event, pulsate, preserveIndex) {
        if ($("#menuToggle input").prop('checked')) {
            targets = $('#hamburger-menu a');
            currentIndex = 0;
        } else {
            targets = $.merge($("a:not([data-keynav-skip])"),($('.top-search')));
            if (jumpToIndexOnLoad > 0) {
                currentIndex = jumpToIndexOnLoad;
                jumpToIndexOnLoad = undefined;
            } else if (!preserveIndex) {
                var priorityLink = $("[data-keynav-priority]")[0]
                var i = $.inArray(priorityLink, targets)
                currentIndex = i > 0 ? i : 0;
            }
        }
        targetsLength = targets.length;
        clearTargets()
        $(targets[currentIndex]).addClass("keynav-target").focus().blur() // refocuses keyboard context
        if (pulsate) {
            $(targets[currentIndex]).addClass("pulsate")
        }
    }

    Mousetrap.bind(['left','['], function(e) {
        clearTargets()
        currentIndex--
        if (currentIndex < 0) {
            currentIndex = targetsLength-1
        }
        $(targets[currentIndex]).addClass("keynav-target")
    });

    Mousetrap.bind(['right',']'], function(e) {
        clearTargets()
        currentIndex++
        if (currentIndex >= targetsLength) {
            currentIndex = 0
        }
        $(targets[currentIndex]).addClass("keynav-target")
    });

    Mousetrap.bind('enter', function(e) {
        if (targets.length < currentIndex) {
            return
        }
        var currentTarget = $(targets[currentIndex])
        if (currentTarget.is( "input")) {
            currentTarget.focus()
            e.stopPropagation()
            e.preventDefault()
            return
        }
        if (currentTarget[0].id == 'keynav-toggle') {
            toggleKeyNav()
            return
        }
        var location = currentTarget.attr('href');
        if (location !== undefined) {
            var preserveKeyNavIndex = currentTarget.data("preserveKeynavIndex")
            if (preserveKeyNavIndex) {
                jumpToIndexOnLoad = currentIndex
            }
            currentTarget.addClass("activated")
            Turbolinks.visit(location)
            return
        }
    });

    Mousetrap.bind('\\', function(e) {
        e.preventDefault();
        var $topSearch = $(".top-search")
        if ($topSearch.hasClass("keynav-target")) {
            $topSearch.blur()
            clearTargets()
            keyNav(e, true, 0)
        } else {
            clearTargets()
            $topSearch.addClass("keynav-target").focus()
        }
    });

    Mousetrap.bind('`', function(e) {
       toggleSun()
    });

    Mousetrap.bind('=', function(e) {
        toggleMenu(e)
        keyNav(e, true)
    });

    Mousetrap.bind('q', function(e) {
        clearTargets()
    });

    $("#keynav-toggle .text").text(keyNavEnabled() ? "Disable Hot Keys":"Enable Hot Keys" )
    document.addEventListener("turbolinks:load", function(e){
        closeMenu(e)
        if (keyNavEnabled()) {
            $(".top-search").removeAttr("autofocus")
            keyNav(e, true)
        } else {
            $(".top-search").focus()
        }
    })

    $("#keynav-toggle").on("click", function(e) {
        if (e.offsetX == 0) {
            // prevent duplicate click handling when turbolinks re-attaches handlers
            // TODO find a more semantic way to deal with this
            return
        }
        toggleKeyNav()
    })

    $("#menuToggle input").change(function(e) {
        var menuIsOpen = $(e.currentTarget).prop("checked")
        if (keyNavEnabled()) {
            keyNav(e, true)
        }
    });

</script>
<script>
    $('.scriptDataStar').on('click', function(){
        $(this).next('.scriptData').slideToggle();
    });
    $('#connection').on('click', function(){
        if (Notify.needsPermission) {
            Notify.requestPermission(onPermissionGranted, onPermissionDenied);
        }
    })
</script>

<script data-turbolinks-eval="false">
const app = Stimulus.Application.start()
</script>
<script src="/js/controllers/main.js"  data-turbolinks-eval="false"></script>
<script src="/js/controllers/mempool.js"  data-turbolinks-eval="false"></script>
<script src="/js/controllers/agenda.js"  data-turbolinks-eval="false"></script>
<script src="/js/controllers/charts.js" data-turbolinks-eval="false"></script>
<script src="/js/controllers/address.js" data-turbolinks-eval="false"></script>
<script src="/js/controllers/ticketpool.js" data-turbolinks-eval="false"></script>
{{end}}

{{define "decimalParts"}}
    {{if eq (len .) 4}}
        <span class="int">{{ index . 0 }}.{{ index . 1 }}</span>
        <span class="decimal lh15rem">{{ index . 2 }}</span>
        <span class="decimal lh15rem trailing-zeroes">{{ index . 3 }}</span>
    {{else}}
        <span class="int">{{ index . 0 }}</span>
        {{if (gt (len (index . 1)) 0) | (gt (len (index . 2)) 0)}}
            <span class="dot">.</span>
            <span class="decimal">{{ index . 1 }}
                <span class="trailing-zeroes">{{ index . 2 }}</span>
            </span>
        {{end}}
    {{end}}
{{end}}
